#!/usr/bin/env python2
# vim:set nolist et tw=0 ts=2 sw=2 sts=2: */

import logging
import os
import re
import socket
import subprocess
import sys
import time

def main(remote_server, *remote_cmds):
  remote_hostname = remote_server.split('@', 1)[-1]
  remote_mosh_command = 'mosh-server'
  try:
    remote_ip = socket.gethostbyname(remote_hostname)
  except socket.gaierror as e:
    logging.info('Failed to parse hostname %s: %r', remote_hostname, e)
    remote_ip = remote_hostname
    remote_mosh_command = 'bin/mosh-server-remote'

  lang = os.environ.get('LANG', 'en_US.utf-8')
  logging.info(
      'Remote ip is %r, remote command is %r', remote_ip, remote_mosh_command)

  cmd = ['ssh', '-t', remote_server, '--', 'LANG=%s' % lang, remote_mosh_command, 'new', '-c', '256']
  if remote_cmds:
    cmd.append('--')
    cmd.extend(remote_cmds)

  logging.debug('Executing command: %s', ' '.join(cmd))
  p = subprocess.Popen(
      cmd,
      stdout=subprocess.PIPE)

  port, key = None, None
  for line in p.stdout:
    sys.stdout.write(line)

    m = re.match(r'^MOSH CONNECT (\d+?) ([A-Za-z0-9/+]{22})\s*$', line)
    if m:
      port, key = m.groups()
      continue

    # Allow the remote host to override the hostname resolution.
    m = re.match(r'^MOSH IP ([0-9.]+)\s*$', line)
    if m:
      remote_ip, = m.groups()
      logging.info(
          'Remote side overwrote the host we need to connect to: %s',
          remote_ip)
      continue

  p.wait()

  assert port is not None
  assert key is not None

  env = dict(os.environ)
  env['TERM'] = 'xterm-256color'  # Make 256 colour mode work.
  env['MOSH_KEY'] = key

  # Enable utf8 mouse mode.
###  print '\x1b[?1005h\x1b[?1002h'

  # Poor-man's debugging.
  logging.info('Connecting to mosh client at %s:%s', remote_ip, port)
  time.sleep(4)

  # Actually start mosh-client.
  os.execvpe('mosh-client', ['mosh-client', remote_ip, port], env)


if __name__ == "__main__":
  logging.basicConfig(level=logging.DEBUG)
  main(*sys.argv[1:])
